//
//  MemoryLayoutable.swift
//
//
//  Generated by Evan Anderson at 2025-01-20T02:27:40Z.
//

#if canImport(FoundationEssentials)
import FoundationEssentials
#elseif canImport(Foundation)
import Foundation
#endif

public enum MemoryLayoutable {
    case bool
    case char
    case string
    case stringIndex
    case stringUTF8View
    case stringUTF16View
    case substring
    case substringUTF8View
    case substringUTF16View
    case staticString
    case unicodeScalar
    case continuousClock
    case continuousClockDuration
    case continuousClockInstant
    case suspendingClock
    case suspendingClockInstant
    case staticBigInt
    case int
    case int8
    case int16
    case int32
    case int64
    case uint
    case uint8
    case uint16
    case uint32
    case uint64
    case float
    case double
    case int128
    case uint128
    case stringCompareOptions
    case stringEncoding
    case attributedString
    case data
    case date
    case dateComponents
    case dateInterval
    case decimal
    case locale
    case localeCollation
    case localeComponents
    case localeCurrency
    case localeLanguage
    case localeLanguageComponents
    case localeLanguageCode
    case localeLanguageDirection
    case localeMeasurementSystem
    case localeNumberingSystem
    case localeRegion
    case localeScript
    case localeSubdivision
    case localeVariant
    case timeZone
    case url
    case urlComponents
    case urlQueryItem
    case uuid

    @inlinable public var memoryLayout : (alignment: Int, size: Int, stride: Int) { protocolType.memoryLayout }
}

extension MemoryLayoutable {
    public init?<T: StringProtocol>(rawValue: T) {
        switch rawValue {
        case "bool": self = .bool
        case "char": self = .char
        case "string": self = .string
        case "stringIndex": self = .stringIndex
        case "stringUTF8View": self = .stringUTF8View
        case "stringUTF16View": self = .stringUTF16View
        case "substring": self = .substring
        case "substringUTF8View": self = .substringUTF8View
        case "substringUTF16View": self = .substringUTF16View
        case "staticString": self = .staticString
        case "unicodeScalar": self = .unicodeScalar
        case "continuousClock": self = .continuousClock
        case "continuousClockDuration": self = .continuousClockDuration
        case "continuousClockInstant": self = .continuousClockInstant
        case "suspendingClock": self = .suspendingClock
        case "suspendingClockInstant": self = .suspendingClockInstant
        case "staticBigInt": self = .staticBigInt
        case "int": self = .int
        case "int8": self = .int8
        case "int16": self = .int16
        case "int32": self = .int32
        case "int64": self = .int64
        case "uint": self = .uint
        case "uint8": self = .uint8
        case "uint16": self = .uint16
        case "uint32": self = .uint32
        case "uint64": self = .uint64
        case "float": self = .float
        case "double": self = .double
        case "int128": self = .int128
        case "uint128": self = .uint128
        case "stringCompareOptions": self = .stringCompareOptions
        case "stringEncoding": self = .stringEncoding
        case "attributedString": self = .attributedString
        case "data": self = .data
        case "date": self = .date
        case "dateComponents": self = .dateComponents
        case "dateInterval": self = .dateInterval
        case "decimal": self = .decimal
        case "locale": self = .locale
        case "localeCollation": self = .localeCollation
        case "localeComponents": self = .localeComponents
        case "localeCurrency": self = .localeCurrency
        case "localeLanguage": self = .localeLanguage
        case "localeLanguageComponents": self = .localeLanguageComponents
        case "localeLanguageCode": self = .localeLanguageCode
        case "localeLanguageDirection": self = .localeLanguageDirection
        case "localeMeasurementSystem": self = .localeMeasurementSystem
        case "localeNumberingSystem": self = .localeNumberingSystem
        case "localeRegion": self = .localeRegion
        case "localeScript": self = .localeScript
        case "localeSubdivision": self = .localeSubdivision
        case "localeVariant": self = .localeVariant
        case "timeZone": self = .timeZone
        case "url": self = .url
        case "urlComponents": self = .urlComponents
        case "urlQueryItem": self = .urlQueryItem
        case "uuid": self = .uuid
        default: return nil
        }
    }
}

extension MemoryLayoutable {
    @inlinable public var protocolType : MemoryLayoutableProtocol.Type {
        switch self {
        case .bool: return Bool.self
        case .char: return Character.self
        case .string: return String.self
        case .stringIndex: return String.Index.self
        case .stringUTF8View: return String.UTF8View.self
        case .stringUTF16View: return String.UTF16View.self
        case .substring: return Substring.self
        case .substringUTF8View: return Substring.UTF8View.self
        case .substringUTF16View: return Substring.UTF16View.self
        case .staticString: return StaticString.self
        case .unicodeScalar: return Unicode.Scalar.self
        case .continuousClock: return ContinuousClock.self
        case .continuousClockDuration: return ContinuousClock.Duration.self
        case .continuousClockInstant: return ContinuousClock.Instant.self
        case .suspendingClock: return SuspendingClock.self
        case .suspendingClockInstant: return SuspendingClock.Instant.self
        case .staticBigInt: return StaticBigInt.self
        case .int: return Int.self
        case .int8: return Int8.self
        case .int16: return Int16.self
        case .int32: return Int32.self
        case .int64: return Int64.self
        case .uint: return UInt.self
        case .uint8: return UInt8.self
        case .uint16: return UInt16.self
        case .uint32: return UInt32.self
        case .uint64: return UInt64.self
        case .float: return Float.self
        case .double: return Double.self
        case .int128: return Int128.self
        case .uint128: return UInt128.self
        case .stringCompareOptions: return String.CompareOptions.self
        case .stringEncoding: return String.Encoding.self
        case .attributedString: return AttributedString.self
        case .data: return Data.self
        case .date: return Date.self
        case .dateComponents: return DateComponents.self
        case .dateInterval: return DateInterval.self
        case .decimal: return Decimal.self
        case .locale: return Locale.self
        case .localeCollation: return Locale.Collation.self
        case .localeComponents: return Locale.Components.self
        case .localeCurrency: return Locale.Currency.self
        case .localeLanguage: return Locale.Language.self
        case .localeLanguageComponents: return Locale.Language.Components.self
        case .localeLanguageCode: return Locale.LanguageCode.self
        case .localeLanguageDirection: return Locale.LanguageDirection.self
        case .localeMeasurementSystem: return Locale.MeasurementSystem.self
        case .localeNumberingSystem: return Locale.NumberingSystem.self
        case .localeRegion: return Locale.Region.self
        case .localeScript: return Locale.Script.self
        case .localeSubdivision: return Locale.Subdivision.self
        case .localeVariant: return Locale.Variant.self
        case .timeZone: return TimeZone.self
        case .url: return URL.self
        case .urlComponents: return URLComponents.self
        case .urlQueryItem: return URLQueryItem.self
        case .uuid: return UUID.self
        }
    }
}


extension Bool : MemoryLayoutableProtocol {}
extension Character : MemoryLayoutableProtocol {}
extension String : MemoryLayoutableProtocol {}
extension String.Index : MemoryLayoutableProtocol {}
extension String.UTF8View : MemoryLayoutableProtocol {}
extension String.UTF16View : MemoryLayoutableProtocol {}
extension Substring : MemoryLayoutableProtocol {}
extension Substring.UTF8View : MemoryLayoutableProtocol {}
extension Substring.UTF16View : MemoryLayoutableProtocol {}
extension StaticString : MemoryLayoutableProtocol {}
extension Unicode.Scalar : MemoryLayoutableProtocol {}
extension ContinuousClock : MemoryLayoutableProtocol {}
extension ContinuousClock.Duration : MemoryLayoutableProtocol {}
extension ContinuousClock.Instant : MemoryLayoutableProtocol {}
extension SuspendingClock : MemoryLayoutableProtocol {}
extension SuspendingClock.Instant : MemoryLayoutableProtocol {}
extension StaticBigInt : MemoryLayoutableProtocol {}
extension Int : MemoryLayoutableProtocol {}
extension Int8 : MemoryLayoutableProtocol {}
extension Int16 : MemoryLayoutableProtocol {}
extension Int32 : MemoryLayoutableProtocol {}
extension Int64 : MemoryLayoutableProtocol {}
extension UInt : MemoryLayoutableProtocol {}
extension UInt8 : MemoryLayoutableProtocol {}
extension UInt16 : MemoryLayoutableProtocol {}
extension UInt32 : MemoryLayoutableProtocol {}
extension UInt64 : MemoryLayoutableProtocol {}
extension Float : MemoryLayoutableProtocol {}
extension Double : MemoryLayoutableProtocol {}
extension Int128 : MemoryLayoutableProtocol {}
extension UInt128 : MemoryLayoutableProtocol {}
extension String.CompareOptions : MemoryLayoutableProtocol {}
extension String.Encoding : MemoryLayoutableProtocol {}
extension AttributedString : MemoryLayoutableProtocol {}
extension Data : MemoryLayoutableProtocol {}
extension Date : MemoryLayoutableProtocol {}
extension DateComponents : MemoryLayoutableProtocol {}
extension DateInterval : MemoryLayoutableProtocol {}
extension Decimal : MemoryLayoutableProtocol {}
extension Locale : MemoryLayoutableProtocol {}
extension Locale.Collation : MemoryLayoutableProtocol {}
extension Locale.Components : MemoryLayoutableProtocol {}
extension Locale.Currency : MemoryLayoutableProtocol {}
extension Locale.Language : MemoryLayoutableProtocol {}
extension Locale.Language.Components : MemoryLayoutableProtocol {}
extension Locale.LanguageCode : MemoryLayoutableProtocol {}
extension Locale.LanguageDirection : MemoryLayoutableProtocol {}
extension Locale.MeasurementSystem : MemoryLayoutableProtocol {}
extension Locale.NumberingSystem : MemoryLayoutableProtocol {}
extension Locale.Region : MemoryLayoutableProtocol {}
extension Locale.Script : MemoryLayoutableProtocol {}
extension Locale.Subdivision : MemoryLayoutableProtocol {}
extension Locale.Variant : MemoryLayoutableProtocol {}
extension TimeZone : MemoryLayoutableProtocol {}
extension URL : MemoryLayoutableProtocol {}
extension URLComponents : MemoryLayoutableProtocol {}
extension URLQueryItem : MemoryLayoutableProtocol {}
extension UUID : MemoryLayoutableProtocol {}